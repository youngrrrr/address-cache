package com.redacted;

import java.net.InetAddress;
import java.util.Date;

/**
 * A class associating an InetAddress with an expiration date. Note that
 * expiration dates have a purely associative function; that is
 * {@code TimedInetAddress}es with different expiration dates are considered
 * equivalent.
 * 
 * @author young-raekim
 *
 */
public class TimedInetAddress {

  private final InetAddress address;
  private final Date expirationDate;

  /**
   * A class representing an InetAddress with the instantiation time as the
   * default expirationDate.
   * 
   * @param address
   *          the {@link InetAddress}
   */
  public TimedInetAddress(InetAddress address) {
    this(address, new Date());
  }

  /**
   * A class representing an InetAddress and its given, associated expiration
   * date.
   * 
   * @param address
   *          the {@link InetAddress}
   * @param expirationDate
   *          the given expiration date
   */
  public TimedInetAddress(InetAddress address, Date expirationDate) {
    if (address == null || expirationDate == null) {
      throw new IllegalArgumentException("Input variables cannot be null");
    }

    this.address = address;
    this.expirationDate = expirationDate;
  }

  /**
   * Gets the {@link InetAddress}.
   * 
   * @return the {@link InetAddress}
   */
  public InetAddress getInetAddress() {
    return address;
  }

  /**
   * Gets the expiration date.
   * 
   * @return the expiration date
   */
  public Date getExpirationDate() {
    return expirationDate;
  }

  /**
   * Checks the expiration date against the current time - called within
   * isExpired(). If the current time is before or on the expirationDate, we
   * return {@code false}.
   * 
   * @return whether or not the {@link TimedInetAddress} has expired
   */
  public boolean isExpired() {
    return new Date(System.currentTimeMillis()).compareTo(expirationDate) > 0;
  }

  /*
   * Generated by Eclipse. (non-Javadoc)
   * 
   * @see java.lang.Object#hashCode()
   */
  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((address == null) ? 0 : address.hashCode());
    return result;
  }

  /*
   * Generated by Eclipse. (non-Javadoc)
   * 
   * @see java.lang.Object#equals(java.lang.Object)
   */
  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    TimedInetAddress other = (TimedInetAddress) obj;
    if (address == null) {
      if (other.address != null)
        return false;
    } else if (!address.equals(other.address))
      return false;
    return true;
  }

}
